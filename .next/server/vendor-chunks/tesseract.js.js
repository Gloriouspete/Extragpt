/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tesseract.js";
exports.ids = ["vendor-chunks/tesseract.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/tesseract.js/node_modules/regenerator-runtime/runtime.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/tesseract.js/node_modules/regenerator-runtime/runtime.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var runtime = function(exports) {\n    \"use strict\";\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var defineProperty = Object.defineProperty || function(obj, key, desc) {\n        obj[key] = desc.value;\n    };\n    var undefined; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    function define(obj, key, value) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n        return obj[key];\n    }\n    try {\n        // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n        define({}, \"\");\n    } catch (err) {\n        define = function(obj, key, value) {\n            return obj[key] = value;\n        };\n    }\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n        var generator = Object.create(protoGenerator.prototype);\n        var context = new Context(tryLocsList || []);\n        // The ._invoke method unifies the implementations of the .next,\n        // .throw, and .return methods.\n        defineProperty(generator, \"_invoke\", {\n            value: makeInvokeMethod(innerFn, self, context)\n        });\n        return generator;\n    }\n    exports.wrap = wrap;\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n        try {\n            return {\n                type: \"normal\",\n                arg: fn.call(obj, arg)\n            };\n        } catch (err) {\n            return {\n                type: \"throw\",\n                arg: err\n            };\n        }\n    }\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function() {\n        return this;\n    });\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n        // This environment has a native %IteratorPrototype%; use it instead\n        // of the polyfill.\n        IteratorPrototype = NativeIteratorPrototype;\n    }\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = GeneratorFunctionPrototype;\n    defineProperty(Gp, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: true\n    });\n    defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: true\n    });\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\");\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(method) {\n            define(prototype, method, function(arg) {\n                return this._invoke(method, arg);\n            });\n        });\n    }\n    exports.isGeneratorFunction = function(genFun) {\n        var ctor = typeof genFun === \"function\" && genFun.constructor;\n        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n    exports.mark = function(genFun) {\n        if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n        } else {\n            genFun.__proto__ = GeneratorFunctionPrototype;\n            define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n        }\n        genFun.prototype = Object.create(Gp);\n        return genFun;\n    };\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    exports.awrap = function(arg) {\n        return {\n            __await: arg\n        };\n    };\n    function AsyncIterator(generator, PromiseImpl) {\n        function invoke(method, arg, resolve, reject) {\n            var record = tryCatch(generator[method], generator, arg);\n            if (record.type === \"throw\") {\n                reject(record.arg);\n            } else {\n                var result = record.arg;\n                var value = result.value;\n                if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n                    return PromiseImpl.resolve(value.__await).then(function(value) {\n                        invoke(\"next\", value, resolve, reject);\n                    }, function(err) {\n                        invoke(\"throw\", err, resolve, reject);\n                    });\n                }\n                return PromiseImpl.resolve(value).then(function(unwrapped) {\n                    // When a yielded Promise is resolved, its final value becomes\n                    // the .value of the Promise<{value,done}> result for the\n                    // current iteration.\n                    result.value = unwrapped;\n                    resolve(result);\n                }, function(error) {\n                    // If a rejected Promise was yielded, throw the rejection back\n                    // into the async generator function so it can be handled there.\n                    return invoke(\"throw\", error, resolve, reject);\n                });\n            }\n        }\n        var previousPromise;\n        function enqueue(method, arg) {\n            function callInvokeWithMethodAndArg() {\n                return new PromiseImpl(function(resolve, reject) {\n                    invoke(method, arg, resolve, reject);\n                });\n            }\n            return previousPromise = // If enqueue has been called before, then we want to wait until\n            // all previous Promises have been resolved before calling invoke,\n            // so that results are always delivered in the correct order. If\n            // enqueue has not been called before, then it is important to\n            // call invoke immediately, without waiting on a callback to fire,\n            // so that the async generator function has the opportunity to do\n            // any necessary setup in a predictable way. This predictability\n            // is why the Promise constructor synchronously invokes its\n            // executor callback, and why async functions synchronously\n            // execute code before the first await. Since we implement simple\n            // async functions in terms of async generators, it is especially\n            // important to get this right, even though it requires care.\n            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n            // invocations of the iterator.\n            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        }\n        // Define the unified helper method that is used to implement .next,\n        // .throw, and .return (see defineIteratorMethods).\n        defineProperty(this, \"_invoke\", {\n            value: enqueue\n        });\n    }\n    defineIteratorMethods(AsyncIterator.prototype);\n    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {\n        return this;\n    });\n    exports.AsyncIterator = AsyncIterator;\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n        if (PromiseImpl === void 0) PromiseImpl = Promise;\n        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n         : iter.next().then(function(result) {\n            return result.done ? result.value : iter.next();\n        });\n    };\n    function makeInvokeMethod(innerFn, self, context) {\n        var state = GenStateSuspendedStart;\n        return function invoke(method, arg) {\n            if (state === GenStateExecuting) {\n                throw new Error(\"Generator is already running\");\n            }\n            if (state === GenStateCompleted) {\n                if (method === \"throw\") {\n                    throw arg;\n                }\n                // Be forgiving, per 25.3.3.3.3 of the spec:\n                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n                return doneResult();\n            }\n            context.method = method;\n            context.arg = arg;\n            while(true){\n                var delegate = context.delegate;\n                if (delegate) {\n                    var delegateResult = maybeInvokeDelegate(delegate, context);\n                    if (delegateResult) {\n                        if (delegateResult === ContinueSentinel) continue;\n                        return delegateResult;\n                    }\n                }\n                if (context.method === \"next\") {\n                    // Setting context._sent for legacy support of Babel's\n                    // function.sent implementation.\n                    context.sent = context._sent = context.arg;\n                } else if (context.method === \"throw\") {\n                    if (state === GenStateSuspendedStart) {\n                        state = GenStateCompleted;\n                        throw context.arg;\n                    }\n                    context.dispatchException(context.arg);\n                } else if (context.method === \"return\") {\n                    context.abrupt(\"return\", context.arg);\n                }\n                state = GenStateExecuting;\n                var record = tryCatch(innerFn, self, context);\n                if (record.type === \"normal\") {\n                    // If an exception is thrown from innerFn, we leave state ===\n                    // GenStateExecuting and loop back for another invocation.\n                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n                    if (record.arg === ContinueSentinel) {\n                        continue;\n                    }\n                    return {\n                        value: record.arg,\n                        done: context.done\n                    };\n                } else if (record.type === \"throw\") {\n                    state = GenStateCompleted;\n                    // Dispatch the exception by looping back around to the\n                    // context.dispatchException(context.arg) call above.\n                    context.method = \"throw\";\n                    context.arg = record.arg;\n                }\n            }\n        };\n    }\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n        var methodName = context.method;\n        var method = delegate.iterator[methodName];\n        if (method === undefined) {\n            // A .throw or .return when the delegate iterator has no .throw\n            // method, or a missing .next mehtod, always terminate the\n            // yield* loop.\n            context.delegate = null;\n            // Note: [\"return\"] must be used for ES3 parsing compatibility.\n            if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n                // If the delegate iterator has a return method, give it a\n                // chance to clean up.\n                context.method = \"return\";\n                context.arg = undefined;\n                maybeInvokeDelegate(delegate, context);\n                if (context.method === \"throw\") {\n                    // If maybeInvokeDelegate(context) changed context.method from\n                    // \"return\" to \"throw\", let that override the TypeError below.\n                    return ContinueSentinel;\n                }\n            }\n            if (methodName !== \"return\") {\n                context.method = \"throw\";\n                context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\");\n            }\n            return ContinueSentinel;\n        }\n        var record = tryCatch(method, delegate.iterator, context.arg);\n        if (record.type === \"throw\") {\n            context.method = \"throw\";\n            context.arg = record.arg;\n            context.delegate = null;\n            return ContinueSentinel;\n        }\n        var info = record.arg;\n        if (!info) {\n            context.method = \"throw\";\n            context.arg = new TypeError(\"iterator result is not an object\");\n            context.delegate = null;\n            return ContinueSentinel;\n        }\n        if (info.done) {\n            // Assign the result of the finished delegate to the temporary\n            // variable specified by delegate.resultName (see delegateYield).\n            context[delegate.resultName] = info.value;\n            // Resume execution at the desired location (see delegateYield).\n            context.next = delegate.nextLoc;\n            // If context.method was \"throw\" but the delegate handled the\n            // exception, let the outer generator proceed normally. If\n            // context.method was \"next\", forget context.arg since it has been\n            // \"consumed\" by the delegate iterator. If context.method was\n            // \"return\", allow the original .return call to continue in the\n            // outer generator.\n            if (context.method !== \"return\") {\n                context.method = \"next\";\n                context.arg = undefined;\n            }\n        } else {\n            // Re-yield the result returned by the delegate method.\n            return info;\n        }\n        // The delegate iterator is finished, so forget it and continue with\n        // the outer generator.\n        context.delegate = null;\n        return ContinueSentinel;\n    }\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\");\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    define(Gp, iteratorSymbol, function() {\n        return this;\n    });\n    define(Gp, \"toString\", function() {\n        return \"[object Generator]\";\n    });\n    function pushTryEntry(locs) {\n        var entry = {\n            tryLoc: locs[0]\n        };\n        if (1 in locs) {\n            entry.catchLoc = locs[1];\n        }\n        if (2 in locs) {\n            entry.finallyLoc = locs[2];\n            entry.afterLoc = locs[3];\n        }\n        this.tryEntries.push(entry);\n    }\n    function resetTryEntry(entry) {\n        var record = entry.completion || {};\n        record.type = \"normal\";\n        delete record.arg;\n        entry.completion = record;\n    }\n    function Context(tryLocsList) {\n        // The root entry object (effectively a try statement without a catch\n        // or a finally block) gives us a place to store values thrown from\n        // locations where there is no enclosing try statement.\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ];\n        tryLocsList.forEach(pushTryEntry, this);\n        this.reset(true);\n    }\n    exports.keys = function(val) {\n        var object = Object(val);\n        var keys = [];\n        for(var key in object){\n            keys.push(key);\n        }\n        keys.reverse();\n        // Rather than returning an object with a next method, we keep\n        // things simple and return the next function itself.\n        return function next() {\n            while(keys.length){\n                var key = keys.pop();\n                if (key in object) {\n                    next.value = key;\n                    next.done = false;\n                    return next;\n                }\n            }\n            // To avoid creating an additional object, we just hang the .value\n            // and .done properties off the next function object itself. This\n            // also ensures that the minifier will not anonymize the function.\n            next.done = true;\n            return next;\n        };\n    };\n    function values(iterable) {\n        if (iterable) {\n            var iteratorMethod = iterable[iteratorSymbol];\n            if (iteratorMethod) {\n                return iteratorMethod.call(iterable);\n            }\n            if (typeof iterable.next === \"function\") {\n                return iterable;\n            }\n            if (!isNaN(iterable.length)) {\n                var i = -1, next = function next() {\n                    while(++i < iterable.length){\n                        if (hasOwn.call(iterable, i)) {\n                            next.value = iterable[i];\n                            next.done = false;\n                            return next;\n                        }\n                    }\n                    next.value = undefined;\n                    next.done = true;\n                    return next;\n                };\n                return next.next = next;\n            }\n        }\n        // Return an iterator with no values.\n        return {\n            next: doneResult\n        };\n    }\n    exports.values = values;\n    function doneResult() {\n        return {\n            value: undefined,\n            done: true\n        };\n    }\n    Context.prototype = {\n        constructor: Context,\n        reset: function(skipTempReset) {\n            this.prev = 0;\n            this.next = 0;\n            // Resetting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            this.sent = this._sent = undefined;\n            this.done = false;\n            this.delegate = null;\n            this.method = \"next\";\n            this.arg = undefined;\n            this.tryEntries.forEach(resetTryEntry);\n            if (!skipTempReset) {\n                for(var name in this){\n                    // Not sure about the optimal order of these conditions:\n                    if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n                        this[name] = undefined;\n                    }\n                }\n            }\n        },\n        stop: function() {\n            this.done = true;\n            var rootEntry = this.tryEntries[0];\n            var rootRecord = rootEntry.completion;\n            if (rootRecord.type === \"throw\") {\n                throw rootRecord.arg;\n            }\n            return this.rval;\n        },\n        dispatchException: function(exception) {\n            if (this.done) {\n                throw exception;\n            }\n            var context = this;\n            function handle(loc, caught) {\n                record.type = \"throw\";\n                record.arg = exception;\n                context.next = loc;\n                if (caught) {\n                    // If the dispatched exception was caught by a catch block,\n                    // then let that catch block handle the exception normally.\n                    context.method = \"next\";\n                    context.arg = undefined;\n                }\n                return !!caught;\n            }\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                var record = entry.completion;\n                if (entry.tryLoc === \"root\") {\n                    // Exception thrown outside of any try block that could handle\n                    // it, so set the completion value of the entire function to\n                    // throw the exception.\n                    return handle(\"end\");\n                }\n                if (entry.tryLoc <= this.prev) {\n                    var hasCatch = hasOwn.call(entry, \"catchLoc\");\n                    var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n                    if (hasCatch && hasFinally) {\n                        if (this.prev < entry.catchLoc) {\n                            return handle(entry.catchLoc, true);\n                        } else if (this.prev < entry.finallyLoc) {\n                            return handle(entry.finallyLoc);\n                        }\n                    } else if (hasCatch) {\n                        if (this.prev < entry.catchLoc) {\n                            return handle(entry.catchLoc, true);\n                        }\n                    } else if (hasFinally) {\n                        if (this.prev < entry.finallyLoc) {\n                            return handle(entry.finallyLoc);\n                        }\n                    } else {\n                        throw new Error(\"try statement without catch or finally\");\n                    }\n                }\n            }\n        },\n        abrupt: function(type, arg) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n                    var finallyEntry = entry;\n                    break;\n                }\n            }\n            if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n                // Ignore the finally entry if control is not jumping to a\n                // location outside the try/catch block.\n                finallyEntry = null;\n            }\n            var record = finallyEntry ? finallyEntry.completion : {};\n            record.type = type;\n            record.arg = arg;\n            if (finallyEntry) {\n                this.method = \"next\";\n                this.next = finallyEntry.finallyLoc;\n                return ContinueSentinel;\n            }\n            return this.complete(record);\n        },\n        complete: function(record, afterLoc) {\n            if (record.type === \"throw\") {\n                throw record.arg;\n            }\n            if (record.type === \"break\" || record.type === \"continue\") {\n                this.next = record.arg;\n            } else if (record.type === \"return\") {\n                this.rval = this.arg = record.arg;\n                this.method = \"return\";\n                this.next = \"end\";\n            } else if (record.type === \"normal\" && afterLoc) {\n                this.next = afterLoc;\n            }\n            return ContinueSentinel;\n        },\n        finish: function(finallyLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.finallyLoc === finallyLoc) {\n                    this.complete(entry.completion, entry.afterLoc);\n                    resetTryEntry(entry);\n                    return ContinueSentinel;\n                }\n            }\n        },\n        \"catch\": function(tryLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc === tryLoc) {\n                    var record = entry.completion;\n                    if (record.type === \"throw\") {\n                        var thrown = record.arg;\n                        resetTryEntry(entry);\n                    }\n                    return thrown;\n                }\n            }\n            // The context.catch method must only be called with a location\n            // argument that corresponds to a known catch block.\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function(iterable, resultName, nextLoc) {\n            this.delegate = {\n                iterator: values(iterable),\n                resultName: resultName,\n                nextLoc: nextLoc\n            };\n            if (this.method === \"next\") {\n                // Deliberately forget the last sent value so that we don't\n                // accidentally pass it on to the delegate.\n                this.arg = undefined;\n            }\n            return ContinueSentinel;\n        }\n    };\n    // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n    return exports;\n}(// If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n true ? module.exports : 0);\ntry {\n    regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, in modern engines\n    // we can explicitly access globalThis. In older engines we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    if (typeof globalThis === \"object\") {\n        globalThis.regeneratorRuntime = runtime;\n    } else {\n        Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/Tesseract.js":
/*!****************************************************!*\
  !*** ./node_modules/tesseract.js/src/Tesseract.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst createWorker = __webpack_require__(/*! ./createWorker */ \"(ssr)/./node_modules/tesseract.js/src/createWorker.js\");\nconst recognize = async (image, langs, options)=>{\n    const worker = await createWorker(langs, 1, options);\n    return worker.recognize(image).finally(async ()=>{\n        await worker.terminate();\n    });\n};\nconst detect = async (image, options)=>{\n    const worker = await createWorker(\"osd\", 0, options);\n    return worker.detect(image).finally(async ()=>{\n        await worker.terminate();\n    });\n};\nmodule.exports = {\n    recognize,\n    detect\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9UZXNzZXJhY3QuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTdCLE1BQU1DLFlBQVksT0FBT0MsT0FBT0MsT0FBT0M7SUFDckMsTUFBTUMsU0FBUyxNQUFNTixhQUFhSSxPQUFPLEdBQUdDO0lBQzVDLE9BQU9DLE9BQU9KLFNBQVMsQ0FBQ0MsT0FDckJJLE9BQU8sQ0FBQztRQUNQLE1BQU1ELE9BQU9FLFNBQVM7SUFDeEI7QUFDSjtBQUVBLE1BQU1DLFNBQVMsT0FBT04sT0FBT0U7SUFDM0IsTUFBTUMsU0FBUyxNQUFNTixhQUFhLE9BQU8sR0FBR0s7SUFDNUMsT0FBT0MsT0FBT0csTUFBTSxDQUFDTixPQUNsQkksT0FBTyxDQUFDO1FBQ1AsTUFBTUQsT0FBT0UsU0FBUztJQUN4QjtBQUNKO0FBRUFFLE9BQU9DLE9BQU8sR0FBRztJQUNmVDtJQUNBTztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL1Rlc3NlcmFjdC5qcz8wNTNmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZVdvcmtlciA9IHJlcXVpcmUoJy4vY3JlYXRlV29ya2VyJyk7XG5cbmNvbnN0IHJlY29nbml6ZSA9IGFzeW5jIChpbWFnZSwgbGFuZ3MsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgd29ya2VyID0gYXdhaXQgY3JlYXRlV29ya2VyKGxhbmdzLCAxLCBvcHRpb25zKTtcbiAgcmV0dXJuIHdvcmtlci5yZWNvZ25pemUoaW1hZ2UpXG4gICAgLmZpbmFsbHkoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgIH0pO1xufTtcblxuY29uc3QgZGV0ZWN0ID0gYXN5bmMgKGltYWdlLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHdvcmtlciA9IGF3YWl0IGNyZWF0ZVdvcmtlcignb3NkJywgMCwgb3B0aW9ucyk7XG4gIHJldHVybiB3b3JrZXIuZGV0ZWN0KGltYWdlKVxuICAgIC5maW5hbGx5KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWNvZ25pemUsXG4gIGRldGVjdCxcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlV29ya2VyIiwicmVxdWlyZSIsInJlY29nbml6ZSIsImltYWdlIiwibGFuZ3MiLCJvcHRpb25zIiwid29ya2VyIiwiZmluYWxseSIsInRlcm1pbmF0ZSIsImRldGVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/Tesseract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/constants/OEM.js":
/*!********************************************************!*\
  !*** ./node_modules/tesseract.js/src/constants/OEM.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */ \nmodule.exports = {\n    TESSERACT_ONLY: 0,\n    LSTM_ONLY: 1,\n    TESSERACT_LSTM_COMBINED: 2,\n    DEFAULT: 3\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jb25zdGFudHMvT0VNLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDO0FBQ0RBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxnQkFBZ0I7SUFDaEJDLFdBQVc7SUFDWEMseUJBQXlCO0lBQ3pCQyxTQUFTO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0d2ViLy4vbm9kZV9tb2R1bGVzL3Rlc3NlcmFjdC5qcy9zcmMvY29uc3RhbnRzL09FTS5qcz8yNzJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBPRU0gPSBPQ1IgRW5naW5lIE1vZGUsIGFuZCB0aGVyZSBhcmUgNCBwb3NzaWJsZSBtb2Rlcy5cbiAqXG4gKiBCeSBkZWZhdWx0IHRlc3NlcmFjdC5qcyB1c2VzIExTVE1fT05MWSBtb2RlLlxuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRFU1NFUkFDVF9PTkxZOiAwLFxuICBMU1RNX09OTFk6IDEsXG4gIFRFU1NFUkFDVF9MU1RNX0NPTUJJTkVEOiAyLFxuICBERUZBVUxUOiAzLFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiVEVTU0VSQUNUX09OTFkiLCJMU1RNX09OTFkiLCJURVNTRVJBQ1RfTFNUTV9DT01CSU5FRCIsIkRFRkFVTFQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/constants/OEM.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/constants/PSM.js":
/*!********************************************************!*\
  !*** ./node_modules/tesseract.js/src/constants/PSM.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * PSM = Page Segmentation Mode\n */ \nmodule.exports = {\n    OSD_ONLY: \"0\",\n    AUTO_OSD: \"1\",\n    AUTO_ONLY: \"2\",\n    AUTO: \"3\",\n    SINGLE_COLUMN: \"4\",\n    SINGLE_BLOCK_VERT_TEXT: \"5\",\n    SINGLE_BLOCK: \"6\",\n    SINGLE_LINE: \"7\",\n    SINGLE_WORD: \"8\",\n    CIRCLE_WORD: \"9\",\n    SINGLE_CHAR: \"10\",\n    SPARSE_TEXT: \"11\",\n    SPARSE_TEXT_OSD: \"12\",\n    RAW_LINE: \"13\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jb25zdGFudHMvUFNNLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDO0FBQ0RBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxNQUFNO0lBQ05DLGVBQWU7SUFDZkMsd0JBQXdCO0lBQ3hCQyxjQUFjO0lBQ2RDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxpQkFBaUI7SUFDakJDLFVBQVU7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHR3ZWIvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jb25zdGFudHMvUFNNLmpzP2M1MjkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFBTTSA9IFBhZ2UgU2VnbWVudGF0aW9uIE1vZGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE9TRF9PTkxZOiAnMCcsXG4gIEFVVE9fT1NEOiAnMScsXG4gIEFVVE9fT05MWTogJzInLFxuICBBVVRPOiAnMycsXG4gIFNJTkdMRV9DT0xVTU46ICc0JyxcbiAgU0lOR0xFX0JMT0NLX1ZFUlRfVEVYVDogJzUnLFxuICBTSU5HTEVfQkxPQ0s6ICc2JyxcbiAgU0lOR0xFX0xJTkU6ICc3JyxcbiAgU0lOR0xFX1dPUkQ6ICc4JyxcbiAgQ0lSQ0xFX1dPUkQ6ICc5JyxcbiAgU0lOR0xFX0NIQVI6ICcxMCcsXG4gIFNQQVJTRV9URVhUOiAnMTEnLFxuICBTUEFSU0VfVEVYVF9PU0Q6ICcxMicsXG4gIFJBV19MSU5FOiAnMTMnLFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiT1NEX09OTFkiLCJBVVRPX09TRCIsIkFVVE9fT05MWSIsIkFVVE8iLCJTSU5HTEVfQ09MVU1OIiwiU0lOR0xFX0JMT0NLX1ZFUlRfVEVYVCIsIlNJTkdMRV9CTE9DSyIsIlNJTkdMRV9MSU5FIiwiU0lOR0xFX1dPUkQiLCJDSVJDTEVfV09SRCIsIlNJTkdMRV9DSEFSIiwiU1BBUlNFX1RFWFQiLCJTUEFSU0VfVEVYVF9PU0QiLCJSQVdfTElORSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/constants/PSM.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/constants/defaultOptions.js":
/*!*******************************************************************!*\
  !*** ./node_modules/tesseract.js/src/constants/defaultOptions.js ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */ workerBlobURL: true,\n    logger: ()=>{}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jb25zdGFudHMvZGVmYXVsdE9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZjs7OztHQUlDLEdBQ0RDLGVBQWU7SUFDZkMsUUFBUSxLQUFPO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL2NvbnN0YW50cy9kZWZhdWx0T3B0aW9ucy5qcz9mMGQ3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAvKlxuICAgKiBVc2UgQmxvYlVSTCBmb3Igd29ya2VyIHNjcmlwdCBieSBkZWZhdWx0XG4gICAqIFRPRE86IHJlbW92ZSB0aGlzIG9wdGlvblxuICAgKlxuICAgKi9cbiAgd29ya2VyQmxvYlVSTDogdHJ1ZSxcbiAgbG9nZ2VyOiAoKSA9PiB7fSxcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndvcmtlckJsb2JVUkwiLCJsb2dnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/constants/defaultOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/constants/languages.js":
/*!**************************************************************!*\
  !*** ./node_modules/tesseract.js/src/constants/languages.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * languages with existing tesseract traineddata\n * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n */ /**\n * @typedef {object} Languages\n * @property {string} AFR Afrikaans\n * @property {string} AMH Amharic\n * @property {string} ARA Arabic\n * @property {string} ASM Assamese\n * @property {string} AZE Azerbaijani\n * @property {string} AZE_CYRL Azerbaijani - Cyrillic\n * @property {string} BEL Belarusian\n * @property {string} BEN Bengali\n * @property {string} BOD Tibetan\n * @property {string} BOS Bosnian\n * @property {string} BUL Bulgarian\n * @property {string} CAT Catalan; Valencian\n * @property {string} CEB Cebuano\n * @property {string} CES Czech\n * @property {string} CHI_SIM Chinese - Simplified\n * @property {string} CHI_TRA Chinese - Traditional\n * @property {string} CHR Cherokee\n * @property {string} CYM Welsh\n * @property {string} DAN Danish\n * @property {string} DEU German\n * @property {string} DZO Dzongkha\n * @property {string} ELL Greek, Modern (1453-)\n * @property {string} ENG English\n * @property {string} ENM English, Middle (1100-1500)\n * @property {string} EPO Esperanto\n * @property {string} EST Estonian\n * @property {string} EUS Basque\n * @property {string} FAS Persian\n * @property {string} FIN Finnish\n * @property {string} FRA French\n * @property {string} FRK German Fraktur\n * @property {string} FRM French, Middle (ca. 1400-1600)\n * @property {string} GLE Irish\n * @property {string} GLG Galician\n * @property {string} GRC Greek, Ancient (-1453)\n * @property {string} GUJ Gujarati\n * @property {string} HAT Haitian; Haitian Creole\n * @property {string} HEB Hebrew\n * @property {string} HIN Hindi\n * @property {string} HRV Croatian\n * @property {string} HUN Hungarian\n * @property {string} IKU Inuktitut\n * @property {string} IND Indonesian\n * @property {string} ISL Icelandic\n * @property {string} ITA Italian\n * @property {string} ITA_OLD Italian - Old\n * @property {string} JAV Javanese\n * @property {string} JPN Japanese\n * @property {string} KAN Kannada\n * @property {string} KAT Georgian\n * @property {string} KAT_OLD Georgian - Old\n * @property {string} KAZ Kazakh\n * @property {string} KHM Central Khmer\n * @property {string} KIR Kirghiz; Kyrgyz\n * @property {string} KOR Korean\n * @property {string} KUR Kurdish\n * @property {string} LAO Lao\n * @property {string} LAT Latin\n * @property {string} LAV Latvian\n * @property {string} LIT Lithuanian\n * @property {string} MAL Malayalam\n * @property {string} MAR Marathi\n * @property {string} MKD Macedonian\n * @property {string} MLT Maltese\n * @property {string} MSA Malay\n * @property {string} MYA Burmese\n * @property {string} NEP Nepali\n * @property {string} NLD Dutch; Flemish\n * @property {string} NOR Norwegian\n * @property {string} ORI Oriya\n * @property {string} PAN Panjabi; Punjabi\n * @property {string} POL Polish\n * @property {string} POR Portuguese\n * @property {string} PUS Pushto; Pashto\n * @property {string} RON Romanian; Moldavian; Moldovan\n * @property {string} RUS Russian\n * @property {string} SAN Sanskrit\n * @property {string} SIN Sinhala; Sinhalese\n * @property {string} SLK Slovak\n * @property {string} SLV Slovenian\n * @property {string} SPA Spanish; Castilian\n * @property {string} SPA_OLD Spanish; Castilian - Old\n * @property {string} SQI Albanian\n * @property {string} SRP Serbian\n * @property {string} SRP_LATN Serbian - Latin\n * @property {string} SWA Swahili\n * @property {string} SWE Swedish\n * @property {string} SYR Syriac\n * @property {string} TAM Tamil\n * @property {string} TEL Telugu\n * @property {string} TGK Tajik\n * @property {string} TGL Tagalog\n * @property {string} THA Thai\n * @property {string} TIR Tigrinya\n * @property {string} TUR Turkish\n * @property {string} UIG Uighur; Uyghur\n * @property {string} UKR Ukrainian\n * @property {string} URD Urdu\n * @property {string} UZB Uzbek\n * @property {string} UZB_CYRL Uzbek - Cyrillic\n * @property {string} VIE Vietnamese\n * @property {string} YID Yiddish\n */ /**\n  * @type {Languages}\n  */ \nmodule.exports = {\n    AFR: \"afr\",\n    AMH: \"amh\",\n    ARA: \"ara\",\n    ASM: \"asm\",\n    AZE: \"aze\",\n    AZE_CYRL: \"aze_cyrl\",\n    BEL: \"bel\",\n    BEN: \"ben\",\n    BOD: \"bod\",\n    BOS: \"bos\",\n    BUL: \"bul\",\n    CAT: \"cat\",\n    CEB: \"ceb\",\n    CES: \"ces\",\n    CHI_SIM: \"chi_sim\",\n    CHI_TRA: \"chi_tra\",\n    CHR: \"chr\",\n    CYM: \"cym\",\n    DAN: \"dan\",\n    DEU: \"deu\",\n    DZO: \"dzo\",\n    ELL: \"ell\",\n    ENG: \"eng\",\n    ENM: \"enm\",\n    EPO: \"epo\",\n    EST: \"est\",\n    EUS: \"eus\",\n    FAS: \"fas\",\n    FIN: \"fin\",\n    FRA: \"fra\",\n    FRK: \"frk\",\n    FRM: \"frm\",\n    GLE: \"gle\",\n    GLG: \"glg\",\n    GRC: \"grc\",\n    GUJ: \"guj\",\n    HAT: \"hat\",\n    HEB: \"heb\",\n    HIN: \"hin\",\n    HRV: \"hrv\",\n    HUN: \"hun\",\n    IKU: \"iku\",\n    IND: \"ind\",\n    ISL: \"isl\",\n    ITA: \"ita\",\n    ITA_OLD: \"ita_old\",\n    JAV: \"jav\",\n    JPN: \"jpn\",\n    KAN: \"kan\",\n    KAT: \"kat\",\n    KAT_OLD: \"kat_old\",\n    KAZ: \"kaz\",\n    KHM: \"khm\",\n    KIR: \"kir\",\n    KOR: \"kor\",\n    KUR: \"kur\",\n    LAO: \"lao\",\n    LAT: \"lat\",\n    LAV: \"lav\",\n    LIT: \"lit\",\n    MAL: \"mal\",\n    MAR: \"mar\",\n    MKD: \"mkd\",\n    MLT: \"mlt\",\n    MSA: \"msa\",\n    MYA: \"mya\",\n    NEP: \"nep\",\n    NLD: \"nld\",\n    NOR: \"nor\",\n    ORI: \"ori\",\n    PAN: \"pan\",\n    POL: \"pol\",\n    POR: \"por\",\n    PUS: \"pus\",\n    RON: \"ron\",\n    RUS: \"rus\",\n    SAN: \"san\",\n    SIN: \"sin\",\n    SLK: \"slk\",\n    SLV: \"slv\",\n    SPA: \"spa\",\n    SPA_OLD: \"spa_old\",\n    SQI: \"sqi\",\n    SRP: \"srp\",\n    SRP_LATN: \"srp_latn\",\n    SWA: \"swa\",\n    SWE: \"swe\",\n    SYR: \"syr\",\n    TAM: \"tam\",\n    TEL: \"tel\",\n    TGK: \"tgk\",\n    TGL: \"tgl\",\n    THA: \"tha\",\n    TIR: \"tir\",\n    TUR: \"tur\",\n    UIG: \"uig\",\n    UKR: \"ukr\",\n    URD: \"urd\",\n    UZB: \"uzb\",\n    UZB_CYRL: \"uzb_cyrl\",\n    VIE: \"vie\",\n    YID: \"yid\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/constants/languages.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/createJob.js":
/*!****************************************************!*\
  !*** ./node_modules/tesseract.js/src/createJob.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst getId = __webpack_require__(/*! ./utils/getId */ \"(ssr)/./node_modules/tesseract.js/src/utils/getId.js\");\nlet jobCounter = 0;\nmodule.exports = ({ id: _id, action, payload = {} })=>{\n    let id = _id;\n    if (typeof id === \"undefined\") {\n        id = getId(\"Job\", jobCounter);\n        jobCounter += 1;\n    }\n    return {\n        id,\n        action,\n        payload\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jcmVhdGVKb2IuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXRCLElBQUlDLGFBQWE7QUFFakJDLE9BQU9DLE9BQU8sR0FBRyxDQUFDLEVBQ2hCQyxJQUFJQyxHQUFHLEVBQ1BDLE1BQU0sRUFDTkMsVUFBVSxDQUFDLENBQUMsRUFDYjtJQUNDLElBQUlILEtBQUtDO0lBQ1QsSUFBSSxPQUFPRCxPQUFPLGFBQWE7UUFDN0JBLEtBQUtMLE1BQU0sT0FBT0U7UUFDbEJBLGNBQWM7SUFDaEI7SUFFQSxPQUFPO1FBQ0xHO1FBQ0FFO1FBQ0FDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHR3ZWIvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jcmVhdGVKb2IuanM/M2E0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRJZCA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0SWQnKTtcblxubGV0IGpvYkNvdW50ZXIgPSAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh7XG4gIGlkOiBfaWQsXG4gIGFjdGlvbixcbiAgcGF5bG9hZCA9IHt9LFxufSkgPT4ge1xuICBsZXQgaWQgPSBfaWQ7XG4gIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWQgPSBnZXRJZCgnSm9iJywgam9iQ291bnRlcik7XG4gICAgam9iQ291bnRlciArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBhY3Rpb24sXG4gICAgcGF5bG9hZCxcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0SWQiLCJyZXF1aXJlIiwiam9iQ291bnRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJpZCIsIl9pZCIsImFjdGlvbiIsInBheWxvYWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/createJob.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/createScheduler.js":
/*!**********************************************************!*\
  !*** ./node_modules/tesseract.js/src/createScheduler.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst createJob = __webpack_require__(/*! ./createJob */ \"(ssr)/./node_modules/tesseract.js/src/createJob.js\");\nconst { log } = __webpack_require__(/*! ./utils/log */ \"(ssr)/./node_modules/tesseract.js/src/utils/log.js\");\nconst getId = __webpack_require__(/*! ./utils/getId */ \"(ssr)/./node_modules/tesseract.js/src/utils/getId.js\");\nlet schedulerCounter = 0;\nmodule.exports = ()=>{\n    const id = getId(\"Scheduler\", schedulerCounter);\n    const workers = {};\n    const runningWorkers = {};\n    let jobQueue = [];\n    schedulerCounter += 1;\n    const getQueueLen = ()=>jobQueue.length;\n    const getNumWorkers = ()=>Object.keys(workers).length;\n    const dequeue = ()=>{\n        if (jobQueue.length !== 0) {\n            const wIds = Object.keys(workers);\n            for(let i = 0; i < wIds.length; i += 1){\n                if (typeof runningWorkers[wIds[i]] === \"undefined\") {\n                    jobQueue[0](workers[wIds[i]]);\n                    break;\n                }\n            }\n        }\n    };\n    const queue = (action, payload)=>new Promise((resolve, reject)=>{\n            const job = createJob({\n                action,\n                payload\n            });\n            jobQueue.push(async (w)=>{\n                jobQueue.shift();\n                runningWorkers[w.id] = job;\n                try {\n                    resolve(await w[action].apply(void 0, [\n                        ...payload,\n                        job.id\n                    ]));\n                } catch (err) {\n                    reject(err);\n                } finally{\n                    delete runningWorkers[w.id];\n                    dequeue();\n                }\n            });\n            log(`[${id}]: Add ${job.id} to JobQueue`);\n            log(`[${id}]: JobQueue length=${jobQueue.length}`);\n            dequeue();\n        });\n    const addWorker = (w)=>{\n        workers[w.id] = w;\n        log(`[${id}]: Add ${w.id}`);\n        log(`[${id}]: Number of workers=${getNumWorkers()}`);\n        dequeue();\n        return w.id;\n    };\n    const addJob = async (action, ...payload)=>{\n        if (getNumWorkers() === 0) {\n            throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n        }\n        return queue(action, payload);\n    };\n    const terminate = async ()=>{\n        Object.keys(workers).forEach(async (wid)=>{\n            await workers[wid].terminate();\n        });\n        jobQueue = [];\n    };\n    return {\n        addWorker,\n        addJob,\n        terminate,\n        getQueueLen,\n        getNumWorkers\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9jcmVhdGVTY2hlZHVsZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU0sRUFBRUMsR0FBRyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDO0FBRXRCLElBQUlHLG1CQUFtQjtBQUV2QkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsTUFBTUMsS0FBS0osTUFBTSxhQUFhQztJQUM5QixNQUFNSSxVQUFVLENBQUM7SUFDakIsTUFBTUMsaUJBQWlCLENBQUM7SUFDeEIsSUFBSUMsV0FBVyxFQUFFO0lBRWpCTixvQkFBb0I7SUFFcEIsTUFBTU8sY0FBYyxJQUFNRCxTQUFTRSxNQUFNO0lBQ3pDLE1BQU1DLGdCQUFnQixJQUFNQyxPQUFPQyxJQUFJLENBQUNQLFNBQVNJLE1BQU07SUFFdkQsTUFBTUksVUFBVTtRQUNkLElBQUlOLFNBQVNFLE1BQU0sS0FBSyxHQUFHO1lBQ3pCLE1BQU1LLE9BQU9ILE9BQU9DLElBQUksQ0FBQ1A7WUFDekIsSUFBSyxJQUFJVSxJQUFJLEdBQUdBLElBQUlELEtBQUtMLE1BQU0sRUFBRU0sS0FBSyxFQUFHO2dCQUN2QyxJQUFJLE9BQU9ULGNBQWMsQ0FBQ1EsSUFBSSxDQUFDQyxFQUFFLENBQUMsS0FBSyxhQUFhO29CQUNsRFIsUUFBUSxDQUFDLEVBQUUsQ0FBQ0YsT0FBTyxDQUFDUyxJQUFJLENBQUNDLEVBQUUsQ0FBQztvQkFDNUI7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxNQUFNQyxRQUFRLENBQUNDLFFBQVFDLFVBQ3JCLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDcEIsTUFBTUMsTUFBTXpCLFVBQVU7Z0JBQUVvQjtnQkFBUUM7WUFBUTtZQUN4Q1gsU0FBU2dCLElBQUksQ0FBQyxPQUFPQztnQkFDbkJqQixTQUFTa0IsS0FBSztnQkFDZG5CLGNBQWMsQ0FBQ2tCLEVBQUVwQixFQUFFLENBQUMsR0FBR2tCO2dCQUN2QixJQUFJO29CQUNGRixRQUFRLE1BQU1JLENBQUMsQ0FBQ1AsT0FBTyxDQUFDUyxLQUFLLENBQUMsUUFBTTsyQkFBSVI7d0JBQVNJLElBQUlsQixFQUFFO3FCQUFDO2dCQUMxRCxFQUFFLE9BQU91QixLQUFLO29CQUNaTixPQUFPTTtnQkFDVCxTQUFVO29CQUNSLE9BQU9yQixjQUFjLENBQUNrQixFQUFFcEIsRUFBRSxDQUFDO29CQUMzQlM7Z0JBQ0Y7WUFDRjtZQUNBZCxJQUFJLENBQUMsQ0FBQyxFQUFFSyxHQUFHLE9BQU8sRUFBRWtCLElBQUlsQixFQUFFLENBQUMsWUFBWSxDQUFDO1lBQ3hDTCxJQUFJLENBQUMsQ0FBQyxFQUFFSyxHQUFHLG1CQUFtQixFQUFFRyxTQUFTRSxNQUFNLENBQUMsQ0FBQztZQUNqREk7UUFDRjtJQUdGLE1BQU1lLFlBQVksQ0FBQ0o7UUFDakJuQixPQUFPLENBQUNtQixFQUFFcEIsRUFBRSxDQUFDLEdBQUdvQjtRQUNoQnpCLElBQUksQ0FBQyxDQUFDLEVBQUVLLEdBQUcsT0FBTyxFQUFFb0IsRUFBRXBCLEVBQUUsQ0FBQyxDQUFDO1FBQzFCTCxJQUFJLENBQUMsQ0FBQyxFQUFFSyxHQUFHLHFCQUFxQixFQUFFTSxnQkFBZ0IsQ0FBQztRQUNuREc7UUFDQSxPQUFPVyxFQUFFcEIsRUFBRTtJQUNiO0lBRUEsTUFBTXlCLFNBQVMsT0FBT1osUUFBUSxHQUFHQztRQUMvQixJQUFJUixvQkFBb0IsR0FBRztZQUN6QixNQUFNb0IsTUFBTSxDQUFDLENBQUMsRUFBRTFCLEdBQUcsMERBQTBELENBQUM7UUFDaEY7UUFDQSxPQUFPWSxNQUFNQyxRQUFRQztJQUN2QjtJQUVBLE1BQU1hLFlBQVk7UUFDaEJwQixPQUFPQyxJQUFJLENBQUNQLFNBQVMyQixPQUFPLENBQUMsT0FBT0M7WUFDbEMsTUFBTTVCLE9BQU8sQ0FBQzRCLElBQUksQ0FBQ0YsU0FBUztRQUM5QjtRQUNBeEIsV0FBVyxFQUFFO0lBQ2Y7SUFFQSxPQUFPO1FBQ0xxQjtRQUNBQztRQUNBRTtRQUNBdkI7UUFDQUU7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL2NyZWF0ZVNjaGVkdWxlci5qcz82OWU0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZUpvYiA9IHJlcXVpcmUoJy4vY3JlYXRlSm9iJyk7XG5jb25zdCB7IGxvZyB9ID0gcmVxdWlyZSgnLi91dGlscy9sb2cnKTtcbmNvbnN0IGdldElkID0gcmVxdWlyZSgnLi91dGlscy9nZXRJZCcpO1xuXG5sZXQgc2NoZWR1bGVyQ291bnRlciA9IDA7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBjb25zdCBpZCA9IGdldElkKCdTY2hlZHVsZXInLCBzY2hlZHVsZXJDb3VudGVyKTtcbiAgY29uc3Qgd29ya2VycyA9IHt9O1xuICBjb25zdCBydW5uaW5nV29ya2VycyA9IHt9O1xuICBsZXQgam9iUXVldWUgPSBbXTtcblxuICBzY2hlZHVsZXJDb3VudGVyICs9IDE7XG5cbiAgY29uc3QgZ2V0UXVldWVMZW4gPSAoKSA9PiBqb2JRdWV1ZS5sZW5ndGg7XG4gIGNvbnN0IGdldE51bVdvcmtlcnMgPSAoKSA9PiBPYmplY3Qua2V5cyh3b3JrZXJzKS5sZW5ndGg7XG5cbiAgY29uc3QgZGVxdWV1ZSA9ICgpID0+IHtcbiAgICBpZiAoam9iUXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICBjb25zdCB3SWRzID0gT2JqZWN0LmtleXMod29ya2Vycyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdJZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBydW5uaW5nV29ya2Vyc1t3SWRzW2ldXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBqb2JRdWV1ZVswXSh3b3JrZXJzW3dJZHNbaV1dKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBxdWV1ZSA9IChhY3Rpb24sIHBheWxvYWQpID0+IChcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBqb2IgPSBjcmVhdGVKb2IoeyBhY3Rpb24sIHBheWxvYWQgfSk7XG4gICAgICBqb2JRdWV1ZS5wdXNoKGFzeW5jICh3KSA9PiB7XG4gICAgICAgIGpvYlF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIHJ1bm5pbmdXb3JrZXJzW3cuaWRdID0gam9iO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc29sdmUoYXdhaXQgd1thY3Rpb25dLmFwcGx5KHRoaXMsIFsuLi5wYXlsb2FkLCBqb2IuaWRdKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBydW5uaW5nV29ya2Vyc1t3LmlkXTtcbiAgICAgICAgICBkZXF1ZXVlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbG9nKGBbJHtpZH1dOiBBZGQgJHtqb2IuaWR9IHRvIEpvYlF1ZXVlYCk7XG4gICAgICBsb2coYFske2lkfV06IEpvYlF1ZXVlIGxlbmd0aD0ke2pvYlF1ZXVlLmxlbmd0aH1gKTtcbiAgICAgIGRlcXVldWUoKTtcbiAgICB9KVxuICApO1xuXG4gIGNvbnN0IGFkZFdvcmtlciA9ICh3KSA9PiB7XG4gICAgd29ya2Vyc1t3LmlkXSA9IHc7XG4gICAgbG9nKGBbJHtpZH1dOiBBZGQgJHt3LmlkfWApO1xuICAgIGxvZyhgWyR7aWR9XTogTnVtYmVyIG9mIHdvcmtlcnM9JHtnZXROdW1Xb3JrZXJzKCl9YCk7XG4gICAgZGVxdWV1ZSgpO1xuICAgIHJldHVybiB3LmlkO1xuICB9O1xuXG4gIGNvbnN0IGFkZEpvYiA9IGFzeW5jIChhY3Rpb24sIC4uLnBheWxvYWQpID0+IHtcbiAgICBpZiAoZ2V0TnVtV29ya2VycygpID09PSAwKSB7XG4gICAgICB0aHJvdyBFcnJvcihgWyR7aWR9XTogWW91IG5lZWQgdG8gaGF2ZSBhdCBsZWFzdCBvbmUgd29ya2VyIGJlZm9yZSBhZGRpbmcgam9ic2ApO1xuICAgIH1cbiAgICByZXR1cm4gcXVldWUoYWN0aW9uLCBwYXlsb2FkKTtcbiAgfTtcblxuICBjb25zdCB0ZXJtaW5hdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgT2JqZWN0LmtleXMod29ya2VycykuZm9yRWFjaChhc3luYyAod2lkKSA9PiB7XG4gICAgICBhd2FpdCB3b3JrZXJzW3dpZF0udGVybWluYXRlKCk7XG4gICAgfSk7XG4gICAgam9iUXVldWUgPSBbXTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGFkZFdvcmtlcixcbiAgICBhZGRKb2IsXG4gICAgdGVybWluYXRlLFxuICAgIGdldFF1ZXVlTGVuLFxuICAgIGdldE51bVdvcmtlcnMsXG4gIH07XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUpvYiIsInJlcXVpcmUiLCJsb2ciLCJnZXRJZCIsInNjaGVkdWxlckNvdW50ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaWQiLCJ3b3JrZXJzIiwicnVubmluZ1dvcmtlcnMiLCJqb2JRdWV1ZSIsImdldFF1ZXVlTGVuIiwibGVuZ3RoIiwiZ2V0TnVtV29ya2VycyIsIk9iamVjdCIsImtleXMiLCJkZXF1ZXVlIiwid0lkcyIsImkiLCJxdWV1ZSIsImFjdGlvbiIsInBheWxvYWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImpvYiIsInB1c2giLCJ3Iiwic2hpZnQiLCJhcHBseSIsImVyciIsImFkZFdvcmtlciIsImFkZEpvYiIsIkVycm9yIiwidGVybWluYXRlIiwiZm9yRWFjaCIsIndpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/createScheduler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/createWorker.js":
/*!*******************************************************!*\
  !*** ./node_modules/tesseract.js/src/createWorker.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst resolvePaths = __webpack_require__(/*! ./utils/resolvePaths */ \"(ssr)/./node_modules/tesseract.js/src/utils/resolvePaths.js\");\nconst circularize = __webpack_require__(/*! ./utils/circularize */ \"(ssr)/./node_modules/tesseract.js/src/utils/circularize.js\");\nconst createJob = __webpack_require__(/*! ./createJob */ \"(ssr)/./node_modules/tesseract.js/src/createJob.js\");\nconst { log } = __webpack_require__(/*! ./utils/log */ \"(ssr)/./node_modules/tesseract.js/src/utils/log.js\");\nconst getId = __webpack_require__(/*! ./utils/getId */ \"(ssr)/./node_modules/tesseract.js/src/utils/getId.js\");\nconst OEM = __webpack_require__(/*! ./constants/OEM */ \"(ssr)/./node_modules/tesseract.js/src/constants/OEM.js\");\nconst { defaultOptions, spawnWorker, terminateWorker, onMessage, loadImage, send } = __webpack_require__(/*! ./worker/node */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/index.js\");\nlet workerCounter = 0;\nmodule.exports = async (langs = \"eng\", oem = OEM.LSTM_ONLY, _options = {}, config = {})=>{\n    const id = getId(\"Worker\", workerCounter);\n    const { logger, errorHandler, ...options } = resolvePaths({\n        ...defaultOptions,\n        ..._options\n    });\n    const resolves = {};\n    const rejects = {};\n    // Current langs, oem, and config file.\n    // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n    const currentLangs = typeof langs === \"string\" ? langs.split(\"+\") : langs;\n    let currentOem = oem;\n    let currentConfig = config;\n    const lstmOnlyCore = [\n        OEM.DEFAULT,\n        OEM.LSTM_ONLY\n    ].includes(oem) && !options.legacyCore;\n    let workerResReject;\n    let workerResResolve;\n    const workerRes = new Promise((resolve, reject)=>{\n        workerResResolve = resolve;\n        workerResReject = reject;\n    });\n    const workerError = (event)=>{\n        workerResReject(event.message);\n    };\n    let worker = spawnWorker(options);\n    worker.onerror = workerError;\n    workerCounter += 1;\n    const setResolve = (action, res)=>{\n        resolves[action] = res;\n    };\n    const setReject = (action, rej)=>{\n        rejects[action] = rej;\n    };\n    const startJob = ({ id: jobId, action, payload })=>new Promise((resolve, reject)=>{\n            log(`[${id}]: Start ${jobId}, action=${action}`);\n            setResolve(action, resolve);\n            setReject(action, reject);\n            send(worker, {\n                workerId: id,\n                jobId,\n                action,\n                payload\n            });\n        });\n    const load = ()=>console.warn(\"`load` is depreciated and should be removed from code (workers now come pre-loaded)\");\n    const loadInternal = (jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"load\",\n            payload: {\n                options: {\n                    lstmOnly: lstmOnlyCore,\n                    corePath: options.corePath,\n                    logging: options.logging\n                }\n            }\n        }));\n    const writeText = (path, text, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"FS\",\n            payload: {\n                method: \"writeFile\",\n                args: [\n                    path,\n                    text\n                ]\n            }\n        }));\n    const readText = (path, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"FS\",\n            payload: {\n                method: \"readFile\",\n                args: [\n                    path,\n                    {\n                        encoding: \"utf8\"\n                    }\n                ]\n            }\n        }));\n    const removeFile = (path, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"FS\",\n            payload: {\n                method: \"unlink\",\n                args: [\n                    path\n                ]\n            }\n        }));\n    const FS = (method, args, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"FS\",\n            payload: {\n                method,\n                args\n            }\n        }));\n    const loadLanguage = ()=>console.warn(\"`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)\");\n    const loadLanguageInternal = (_langs, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"loadLanguage\",\n            payload: {\n                langs: _langs,\n                options: {\n                    langPath: options.langPath,\n                    dataPath: options.dataPath,\n                    cachePath: options.cachePath,\n                    cacheMethod: options.cacheMethod,\n                    gzip: options.gzip,\n                    lstmOnly: [\n                        OEM.LSTM_ONLY,\n                        OEM.TESSERACT_LSTM_COMBINED\n                    ].includes(currentOem) && !options.legacyLang\n                }\n            }\n        }));\n    const initialize = ()=>console.warn(\"`initialize` is depreciated and should be removed from code (workers now come pre-initialized)\");\n    const initializeInternal = (_langs, _oem, _config, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"initialize\",\n            payload: {\n                langs: _langs,\n                oem: _oem,\n                config: _config\n            }\n        }));\n    const reinitialize = (langs = \"eng\", oem, config, jobId)=>{\n        if (lstmOnlyCore && [\n            OEM.TESSERACT_ONLY,\n            OEM.TESSERACT_LSTM_COMBINED\n        ].includes(oem)) throw Error(\"Legacy model requested but code missing.\");\n        const _oem = oem || currentOem;\n        currentOem = _oem;\n        const _config = config || currentConfig;\n        currentConfig = _config;\n        // Only load langs that are not already loaded.\n        // This logic fails if the user downloaded the LSTM-only English data for a language\n        // and then uses `worker.reinitialize` to switch to the Legacy engine.\n        // However, the correct data will still be downloaded after initialization fails\n        // and this can be avoided entirely if the user loads the correct data ahead of time.\n        const langsArr = typeof langs === \"string\" ? langs.split(\"+\") : langs;\n        const _langs = langsArr.filter((x)=>!currentLangs.includes(x));\n        currentLangs.push(..._langs);\n        if (_langs.length > 0) {\n            return loadLanguageInternal(_langs, jobId).then(()=>initializeInternal(langs, _oem, _config, jobId));\n        }\n        return initializeInternal(langs, _oem, _config, jobId);\n    };\n    const setParameters = (params = {}, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"setParameters\",\n            payload: {\n                params\n            }\n        }));\n    const recognize = async (image, opts = {}, output = {\n        blocks: true,\n        text: true,\n        hocr: true,\n        tsv: true\n    }, jobId)=>startJob(createJob({\n            id: jobId,\n            action: \"recognize\",\n            payload: {\n                image: await loadImage(image),\n                options: opts,\n                output\n            }\n        }));\n    const getPDF = (title = \"Tesseract OCR Result\", textonly = false, jobId)=>{\n        console.log(\"`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.\");\n        return startJob(createJob({\n            id: jobId,\n            action: \"getPDF\",\n            payload: {\n                title,\n                textonly\n            }\n        }));\n    };\n    const detect = async (image, jobId)=>{\n        if (lstmOnlyCore) throw Error(\"`worker.detect` requires Legacy model, which was not loaded.\");\n        return startJob(createJob({\n            id: jobId,\n            action: \"detect\",\n            payload: {\n                image: await loadImage(image)\n            }\n        }));\n    };\n    const terminate = async ()=>{\n        if (worker !== null) {\n            /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */ terminateWorker(worker);\n            worker = null;\n        }\n        return Promise.resolve();\n    };\n    onMessage(worker, ({ workerId, jobId, status, action, data })=>{\n        if (status === \"resolve\") {\n            log(`[${workerId}]: Complete ${jobId}`);\n            let d = data;\n            if (action === \"recognize\") {\n                d = circularize(data);\n            } else if (action === \"getPDF\") {\n                d = Array.from({\n                    ...data,\n                    length: Object.keys(data).length\n                });\n            }\n            resolves[action]({\n                jobId,\n                data: d\n            });\n        } else if (status === \"reject\") {\n            rejects[action](data);\n            if (action === \"load\") workerResReject(data);\n            if (errorHandler) {\n                errorHandler(data);\n            } else {\n                throw Error(data);\n            }\n        } else if (status === \"progress\") {\n            logger({\n                ...data,\n                userJobId: jobId\n            });\n        }\n    });\n    const resolveObj = {\n        id,\n        worker,\n        setResolve,\n        setReject,\n        load,\n        writeText,\n        readText,\n        removeFile,\n        FS,\n        loadLanguage,\n        initialize,\n        reinitialize,\n        setParameters,\n        recognize,\n        getPDF,\n        detect,\n        terminate\n    };\n    loadInternal().then(()=>loadLanguageInternal(langs)).then(()=>initializeInternal(langs, oem, config)).then(()=>workerResResolve(resolveObj)).catch(()=>{});\n    return workerRes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/createWorker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/tesseract.js/src/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */ \n__webpack_require__(/*! regenerator-runtime/runtime */ \"(ssr)/./node_modules/tesseract.js/node_modules/regenerator-runtime/runtime.js\");\nconst createScheduler = __webpack_require__(/*! ./createScheduler */ \"(ssr)/./node_modules/tesseract.js/src/createScheduler.js\");\nconst createWorker = __webpack_require__(/*! ./createWorker */ \"(ssr)/./node_modules/tesseract.js/src/createWorker.js\");\nconst Tesseract = __webpack_require__(/*! ./Tesseract */ \"(ssr)/./node_modules/tesseract.js/src/Tesseract.js\");\nconst languages = __webpack_require__(/*! ./constants/languages */ \"(ssr)/./node_modules/tesseract.js/src/constants/languages.js\");\nconst OEM = __webpack_require__(/*! ./constants/OEM */ \"(ssr)/./node_modules/tesseract.js/src/constants/OEM.js\");\nconst PSM = __webpack_require__(/*! ./constants/PSM */ \"(ssr)/./node_modules/tesseract.js/src/constants/PSM.js\");\nconst { setLogging } = __webpack_require__(/*! ./utils/log */ \"(ssr)/./node_modules/tesseract.js/src/utils/log.js\");\nmodule.exports = {\n    languages,\n    OEM,\n    PSM,\n    createScheduler,\n    createWorker,\n    setLogging,\n    ...Tesseract\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQztBQUNEQSxtQkFBT0EsQ0FBQztBQUNSLE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUM7QUFDaEMsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUM7QUFDN0IsTUFBTUcsWUFBWUgsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUksWUFBWUosbUJBQU9BLENBQUM7QUFDMUIsTUFBTUssTUFBTUwsbUJBQU9BLENBQUM7QUFDcEIsTUFBTU0sTUFBTU4sbUJBQU9BLENBQUM7QUFDcEIsTUFBTSxFQUFFTyxVQUFVLEVBQUUsR0FBR1AsbUJBQU9BLENBQUM7QUFFL0JRLE9BQU9DLE9BQU8sR0FBRztJQUNmTDtJQUNBQztJQUNBQztJQUNBTDtJQUNBQztJQUNBSztJQUNBLEdBQUdKLFNBQVM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHR3ZWIvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy9pbmRleC5qcz9jNzI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEVudHJ5IHBvaW50IGZvciB0ZXNzZXJhY3QuanMsIHNob3VsZCBiZSB0aGUgZW50cnkgd2hlbiBidW5kbGluZy5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IGVudHJ5IHBvaW50IGZvciB0ZXNzZXJhY3QuanNcbiAqIEBhdXRob3IgS2V2aW4gS3dvayA8YW50aW1hdHRlcjE1QGdtYWlsLmNvbT5cbiAqIEBhdXRob3IgR3VpbGxlcm1vIFdlYnN0ZXIgPGd1aUBtaXQuZWR1PlxuICogQGF1dGhvciBKZXJvbWUgV3UgPGplcm9tZXd1c0BnbWFpbC5jb20+XG4gKi9cbnJlcXVpcmUoJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZScpO1xuY29uc3QgY3JlYXRlU2NoZWR1bGVyID0gcmVxdWlyZSgnLi9jcmVhdGVTY2hlZHVsZXInKTtcbmNvbnN0IGNyZWF0ZVdvcmtlciA9IHJlcXVpcmUoJy4vY3JlYXRlV29ya2VyJyk7XG5jb25zdCBUZXNzZXJhY3QgPSByZXF1aXJlKCcuL1Rlc3NlcmFjdCcpO1xuY29uc3QgbGFuZ3VhZ2VzID0gcmVxdWlyZSgnLi9jb25zdGFudHMvbGFuZ3VhZ2VzJyk7XG5jb25zdCBPRU0gPSByZXF1aXJlKCcuL2NvbnN0YW50cy9PRU0nKTtcbmNvbnN0IFBTTSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzL1BTTScpO1xuY29uc3QgeyBzZXRMb2dnaW5nIH0gPSByZXF1aXJlKCcuL3V0aWxzL2xvZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGFuZ3VhZ2VzLFxuICBPRU0sXG4gIFBTTSxcbiAgY3JlYXRlU2NoZWR1bGVyLFxuICBjcmVhdGVXb3JrZXIsXG4gIHNldExvZ2dpbmcsXG4gIC4uLlRlc3NlcmFjdCxcbn07XG4iXSwibmFtZXMiOlsicmVxdWlyZSIsImNyZWF0ZVNjaGVkdWxlciIsImNyZWF0ZVdvcmtlciIsIlRlc3NlcmFjdCIsImxhbmd1YWdlcyIsIk9FTSIsIlBTTSIsInNldExvZ2dpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/utils/circularize.js":
/*!************************************************************!*\
  !*** ./node_modules/tesseract.js/src/utils/circularize.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */ \nmodule.exports = (page)=>{\n    const blocks = [];\n    const paragraphs = [];\n    const lines = [];\n    const words = [];\n    const symbols = [];\n    if (page.blocks) {\n        page.blocks.forEach((block)=>{\n            block.paragraphs.forEach((paragraph)=>{\n                paragraph.lines.forEach((line)=>{\n                    line.words.forEach((word)=>{\n                        word.symbols.forEach((sym)=>{\n                            symbols.push({\n                                ...sym,\n                                page,\n                                block,\n                                paragraph,\n                                line,\n                                word\n                            });\n                        });\n                        words.push({\n                            ...word,\n                            page,\n                            block,\n                            paragraph,\n                            line\n                        });\n                    });\n                    lines.push({\n                        ...line,\n                        page,\n                        block,\n                        paragraph\n                    });\n                });\n                paragraphs.push({\n                    ...paragraph,\n                    page,\n                    block\n                });\n            });\n            blocks.push({\n                ...block,\n                page\n            });\n        });\n    }\n    return {\n        ...page,\n        blocks,\n        paragraphs,\n        lines,\n        words,\n        symbols\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy91dGlscy9jaXJjdWxhcml6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0NBZUM7QUFFREEsT0FBT0MsT0FBTyxHQUFHLENBQUNDO0lBQ2hCLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixNQUFNQyxhQUFhLEVBQUU7SUFDckIsTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLE1BQU1DLFFBQVEsRUFBRTtJQUNoQixNQUFNQyxVQUFVLEVBQUU7SUFFbEIsSUFBSUwsS0FBS0MsTUFBTSxFQUFFO1FBQ2ZELEtBQUtDLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDLENBQUNDO1lBQ25CQSxNQUFNTCxVQUFVLENBQUNJLE9BQU8sQ0FBQyxDQUFDRTtnQkFDeEJBLFVBQVVMLEtBQUssQ0FBQ0csT0FBTyxDQUFDLENBQUNHO29CQUN2QkEsS0FBS0wsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQ0k7d0JBQ2xCQSxLQUFLTCxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDSzs0QkFDcEJOLFFBQVFPLElBQUksQ0FBQztnQ0FDWCxHQUFHRCxHQUFHO2dDQUFFWDtnQ0FBTU87Z0NBQU9DO2dDQUFXQztnQ0FBTUM7NEJBQ3hDO3dCQUNGO3dCQUNBTixNQUFNUSxJQUFJLENBQUM7NEJBQ1QsR0FBR0YsSUFBSTs0QkFBRVY7NEJBQU1POzRCQUFPQzs0QkFBV0M7d0JBQ25DO29CQUNGO29CQUNBTixNQUFNUyxJQUFJLENBQUM7d0JBQ1QsR0FBR0gsSUFBSTt3QkFBRVQ7d0JBQU1PO3dCQUFPQztvQkFDeEI7Z0JBQ0Y7Z0JBQ0FOLFdBQVdVLElBQUksQ0FBQztvQkFDZCxHQUFHSixTQUFTO29CQUFFUjtvQkFBTU87Z0JBQ3RCO1lBQ0Y7WUFDQU4sT0FBT1csSUFBSSxDQUFDO2dCQUNWLEdBQUdMLEtBQUs7Z0JBQUVQO1lBQ1o7UUFDRjtJQUNGO0lBRUEsT0FBTztRQUNMLEdBQUdBLElBQUk7UUFBRUM7UUFBUUM7UUFBWUM7UUFBT0M7UUFBT0M7SUFDN0M7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHR3ZWIvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy91dGlscy9jaXJjdWxhcml6ZS5qcz80ZDI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW4gdGhlIHJlY29nbml0aW9uIHJlc3VsdCBvZiB0ZXNzZXJhY3QsIHRoZXJlXG4gKiBpcyBhIGRlZXAgSlNPTiBvYmplY3QgZm9yIGRldGFpbHMsIGl0IGhhcyBhcm91bmRcbiAqXG4gKiBUaGUgcmVzdWx0IG9mIGR1bXAuanMgaXMgYSBiaWcgSlNPTiB0cmVlXG4gKiB3aGljaCBjYW4gYmUgZWFzaWx5IHNlcmlhbGl6ZWQgKGZvciBpbnN0YW5jZVxuICogdG8gYmUgc2VudCBmcm9tIGEgd2Vid29ya2VyIHRvIHRoZSBtYWluIGFwcFxuICogb3IgdGhyb3VnaCBOb2RlJ3MgSVBDKSwgYnV0IHdlIHdhbnRcbiAqIGEgKGNpcmN1bGFyKSBET00tbGlrZSBpbnRlcmZhY2UgZm9yIHdhbGtpbmdcbiAqIHRocm91Z2ggdGhlIGRhdGEuXG4gKlxuICogQGZpbGVvdmVydmlldyBET00tbGlrZSBpbnRlcmZhY2UgZm9yIHdhbGtpbmcgdGhyb3VnaCBkYXRhXG4gKiBAYXV0aG9yIEtldmluIEt3b2sgPGFudGltYXR0ZXIxNUBnbWFpbC5jb20+XG4gKiBAYXV0aG9yIEd1aWxsZXJtbyBXZWJzdGVyIDxndWlAbWl0LmVkdT5cbiAqIEBhdXRob3IgSmVyb21lIFd1IDxqZXJvbWV3dXNAZ21haWwuY29tPlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gKHBhZ2UpID0+IHtcbiAgY29uc3QgYmxvY2tzID0gW107XG4gIGNvbnN0IHBhcmFncmFwaHMgPSBbXTtcbiAgY29uc3QgbGluZXMgPSBbXTtcbiAgY29uc3Qgd29yZHMgPSBbXTtcbiAgY29uc3Qgc3ltYm9scyA9IFtdO1xuXG4gIGlmIChwYWdlLmJsb2Nrcykge1xuICAgIHBhZ2UuYmxvY2tzLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgICBibG9jay5wYXJhZ3JhcGhzLmZvckVhY2goKHBhcmFncmFwaCkgPT4ge1xuICAgICAgICBwYXJhZ3JhcGgubGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICAgIGxpbmUud29yZHMuZm9yRWFjaCgod29yZCkgPT4ge1xuICAgICAgICAgICAgd29yZC5zeW1ib2xzLmZvckVhY2goKHN5bSkgPT4ge1xuICAgICAgICAgICAgICBzeW1ib2xzLnB1c2goe1xuICAgICAgICAgICAgICAgIC4uLnN5bSwgcGFnZSwgYmxvY2ssIHBhcmFncmFwaCwgbGluZSwgd29yZCxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdvcmRzLnB1c2goe1xuICAgICAgICAgICAgICAuLi53b3JkLCBwYWdlLCBibG9jaywgcGFyYWdyYXBoLCBsaW5lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGluZXMucHVzaCh7XG4gICAgICAgICAgICAuLi5saW5lLCBwYWdlLCBibG9jaywgcGFyYWdyYXBoLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFyYWdyYXBocy5wdXNoKHtcbiAgICAgICAgICAuLi5wYXJhZ3JhcGgsIHBhZ2UsIGJsb2NrLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgYmxvY2tzLnB1c2goe1xuICAgICAgICAuLi5ibG9jaywgcGFnZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYWdlLCBibG9ja3MsIHBhcmFncmFwaHMsIGxpbmVzLCB3b3Jkcywgc3ltYm9scyxcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhZ2UiLCJibG9ja3MiLCJwYXJhZ3JhcGhzIiwibGluZXMiLCJ3b3JkcyIsInN5bWJvbHMiLCJmb3JFYWNoIiwiYmxvY2siLCJwYXJhZ3JhcGgiLCJsaW5lIiwid29yZCIsInN5bSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/utils/circularize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/utils/getEnvironment.js":
/*!***************************************************************!*\
  !*** ./node_modules/tesseract.js/src/utils/getEnvironment.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst isElectron = __webpack_require__(/*! is-electron */ \"(ssr)/./node_modules/is-electron/index.js\");\nmodule.exports = (key)=>{\n    const env = {};\n    if (typeof WorkerGlobalScope !== \"undefined\") {\n        env.type = \"webworker\";\n    } else if (isElectron()) {\n        env.type = \"electron\";\n    } else if (typeof document === \"object\") {\n        env.type = \"browser\";\n    } else if (typeof process === \"object\" && \"function\" === \"function\") {\n        env.type = \"node\";\n    }\n    if (typeof key === \"undefined\") {\n        return env;\n    }\n    return env[key];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy91dGlscy9nZXRFbnZpcm9ubWVudC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0JDLE9BQU9DLE9BQU8sR0FBRyxDQUFDQztJQUNoQixNQUFNQyxNQUFNLENBQUM7SUFFYixJQUFJLE9BQU9DLHNCQUFzQixhQUFhO1FBQzVDRCxJQUFJRSxJQUFJLEdBQUc7SUFDYixPQUFPLElBQUlQLGNBQWM7UUFDdkJLLElBQUlFLElBQUksR0FBRztJQUNiLE9BQU8sSUFBSSxPQUFPQyxhQUFhLFVBQVU7UUFDdkNILElBQUlFLElBQUksR0FBRztJQUNiLE9BQU8sSUFBSSxPQUFPRSxZQUFZLFlBQVksVUFBY1IsS0FBSyxZQUFZO1FBQ3ZFSSxJQUFJRSxJQUFJLEdBQUc7SUFDYjtJQUVBLElBQUksT0FBT0gsUUFBUSxhQUFhO1FBQzlCLE9BQU9DO0lBQ1Q7SUFFQSxPQUFPQSxHQUFHLENBQUNELElBQUk7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0d2ViLy4vbm9kZV9tb2R1bGVzL3Rlc3NlcmFjdC5qcy9zcmMvdXRpbHMvZ2V0RW52aXJvbm1lbnQuanM/NDMzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc0VsZWN0cm9uID0gcmVxdWlyZSgnaXMtZWxlY3Ryb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoa2V5KSA9PiB7XG4gIGNvbnN0IGVudiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW52LnR5cGUgPSAnd2Vid29ya2VyJztcbiAgfSBlbHNlIGlmIChpc0VsZWN0cm9uKCkpIHtcbiAgICBlbnYudHlwZSA9ICdlbGVjdHJvbic7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIGVudi50eXBlID0gJ2Jyb3dzZXInO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVudi50eXBlID0gJ25vZGUnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGVudjtcbiAgfVxuXG4gIHJldHVybiBlbnZba2V5XTtcbn07XG4iXSwibmFtZXMiOlsiaXNFbGVjdHJvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwia2V5IiwiZW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJ0eXBlIiwiZG9jdW1lbnQiLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/utils/getEnvironment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/utils/getId.js":
/*!******************************************************!*\
  !*** ./node_modules/tesseract.js/src/utils/getId.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (prefix, cnt)=>`${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy91dGlscy9nZXRJZC5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxRQUFRQyxNQUN4QixDQUFDLEVBQUVELE9BQU8sQ0FBQyxFQUFFQyxJQUFJLENBQUMsRUFBRUMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL3V0aWxzL2dldElkLmpzP2UzZDYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAocHJlZml4LCBjbnQpID0+IChcbiAgYCR7cHJlZml4fS0ke2NudH0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zbGljZSgzLCA4KX1gXG4pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwcmVmaXgiLCJjbnQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/utils/getId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/utils/log.js":
/*!****************************************************!*\
  !*** ./node_modules/tesseract.js/src/utils/log.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("let logging = false;\nexports.logging = logging;\nexports.setLogging = (_logging)=>{\n    logging = _logging;\n};\nexports.log = (...args)=>logging ? console.log.apply(this, args) : null;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy91dGlscy9sb2cuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsVUFBVTtBQUVkQyxlQUFlLEdBQUdEO0FBRWxCQyxrQkFBa0IsR0FBRyxDQUFDRTtJQUNwQkgsVUFBVUc7QUFDWjtBQUVBRixXQUFXLEdBQUcsQ0FBQyxHQUFHSSxPQUFVTCxVQUFVTSxRQUFRRixHQUFHLENBQUNHLEtBQUssQ0FBQyxJQUFJLEVBQUVGLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0d2ViLy4vbm9kZV9tb2R1bGVzL3Rlc3NlcmFjdC5qcy9zcmMvdXRpbHMvbG9nLmpzP2UyM2UiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGxvZ2dpbmcgPSBmYWxzZTtcblxuZXhwb3J0cy5sb2dnaW5nID0gbG9nZ2luZztcblxuZXhwb3J0cy5zZXRMb2dnaW5nID0gKF9sb2dnaW5nKSA9PiB7XG4gIGxvZ2dpbmcgPSBfbG9nZ2luZztcbn07XG5cbmV4cG9ydHMubG9nID0gKC4uLmFyZ3MpID0+IChsb2dnaW5nID8gY29uc29sZS5sb2cuYXBwbHkodGhpcywgYXJncykgOiBudWxsKTtcbiJdLCJuYW1lcyI6WyJsb2dnaW5nIiwiZXhwb3J0cyIsInNldExvZ2dpbmciLCJfbG9nZ2luZyIsImxvZyIsImFyZ3MiLCJjb25zb2xlIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/utils/log.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/utils/resolvePaths.js":
/*!*************************************************************!*\
  !*** ./node_modules/tesseract.js/src/utils/resolvePaths.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst isBrowser = __webpack_require__(/*! ./getEnvironment */ \"(ssr)/./node_modules/tesseract.js/src/utils/getEnvironment.js\")(\"type\") === \"browser\";\nconst resolveURL = isBrowser ? (s)=>new URL(s, window.location.href).href : (s)=>s; // eslint-disable-line\nmodule.exports = (options)=>{\n    const opts = {\n        ...options\n    };\n    [\n        \"corePath\",\n        \"workerPath\",\n        \"langPath\"\n    ].forEach((key)=>{\n        if (options[key]) {\n            opts[key] = resolveURL(opts[key]);\n        }\n    });\n    return opts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy91dGlscy9yZXNvbHZlUGF0aHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDLHlGQUFvQixZQUFZO0FBRTFELE1BQU1DLGFBQWFGLFlBQVlHLENBQUFBLElBQUssSUFBS0MsSUFBSUQsR0FBR0UsT0FBT0MsUUFBUSxDQUFDQyxJQUFJLEVBQUdBLElBQUksR0FBR0osQ0FBQUEsSUFBS0EsR0FBRyxzQkFBc0I7QUFFNUdLLE9BQU9DLE9BQU8sR0FBRyxDQUFDQztJQUNoQixNQUFNQyxPQUFPO1FBQUUsR0FBR0QsT0FBTztJQUFDO0lBQzFCO1FBQUM7UUFBWTtRQUFjO0tBQVcsQ0FBQ0UsT0FBTyxDQUFDLENBQUNDO1FBQzlDLElBQUlILE9BQU8sQ0FBQ0csSUFBSSxFQUFFO1lBQ2hCRixJQUFJLENBQUNFLElBQUksR0FBR1gsV0FBV1MsSUFBSSxDQUFDRSxJQUFJO1FBQ2xDO0lBQ0Y7SUFDQSxPQUFPRjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL3V0aWxzL3Jlc29sdmVQYXRocy5qcz83ZTkwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzQnJvd3NlciA9IHJlcXVpcmUoJy4vZ2V0RW52aXJvbm1lbnQnKSgndHlwZScpID09PSAnYnJvd3Nlcic7XG5cbmNvbnN0IHJlc29sdmVVUkwgPSBpc0Jyb3dzZXIgPyBzID0+IChuZXcgVVJMKHMsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkuaHJlZiA6IHMgPT4gczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5tb2R1bGUuZXhwb3J0cyA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IG9wdHMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgWydjb3JlUGF0aCcsICd3b3JrZXJQYXRoJywgJ2xhbmdQYXRoJ10uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKG9wdGlvbnNba2V5XSkge1xuICAgICAgb3B0c1trZXldID0gcmVzb2x2ZVVSTChvcHRzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcHRzO1xufTtcbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXIiLCJyZXF1aXJlIiwicmVzb2x2ZVVSTCIsInMiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsIm9wdHMiLCJmb3JFYWNoIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/utils/resolvePaths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/defaultOptions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/defaultOptions.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst defaultOptions = __webpack_require__(/*! ../../constants/defaultOptions */ \"(ssr)/./node_modules/tesseract.js/src/constants/defaultOptions.js\");\n/*\n * Default options for node worker\n */ module.exports = {\n    ...defaultOptions,\n    workerPath: path.join(__dirname, \"..\", \"..\", \"worker-script\", \"node\", \"index.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9kZWZhdWx0T3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUUvQjs7Q0FFQyxHQUNERSxPQUFPQyxPQUFPLEdBQUc7SUFDZixHQUFHRixjQUFjO0lBQ2pCRyxZQUFZTCxLQUFLTSxJQUFJLENBQUNDLFdBQVcsTUFBTSxNQUFNLGlCQUFpQixRQUFRO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL3dvcmtlci9ub2RlL2RlZmF1bHRPcHRpb25zLmpzP2ExZTMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzL2RlZmF1bHRPcHRpb25zJyk7XG5cbi8qXG4gKiBEZWZhdWx0IG9wdGlvbnMgZm9yIG5vZGUgd29ya2VyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgd29ya2VyUGF0aDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3dvcmtlci1zY3JpcHQnLCAnbm9kZScsICdpbmRleC5qcycpLFxufTtcbiJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImRlZmF1bHRPcHRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyIsIndvcmtlclBhdGgiLCJqb2luIiwiX19kaXJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/defaultOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/index.js":
/*!************************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n *\n * Tesseract Worker impl. for node (using child_process)\n *\n * @fileoverview Tesseract Worker impl. for node\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */ \nconst defaultOptions = __webpack_require__(/*! ./defaultOptions */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/defaultOptions.js\");\nconst spawnWorker = __webpack_require__(/*! ./spawnWorker */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/spawnWorker.js\");\nconst terminateWorker = __webpack_require__(/*! ./terminateWorker */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/terminateWorker.js\");\nconst onMessage = __webpack_require__(/*! ./onMessage */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/onMessage.js\");\nconst send = __webpack_require__(/*! ./send */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/send.js\");\nconst loadImage = __webpack_require__(/*! ./loadImage */ \"(ssr)/./node_modules/tesseract.js/src/worker/node/loadImage.js\");\nmodule.exports = {\n    defaultOptions,\n    spawnWorker,\n    terminateWorker,\n    onMessage,\n    send,\n    loadImage\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQztBQUNELE1BQU1BLGlCQUFpQkMsbUJBQU9BLENBQUM7QUFDL0IsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUUsa0JBQWtCRixtQkFBT0EsQ0FBQztBQUNoQyxNQUFNRyxZQUFZSCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNSSxPQUFPSixtQkFBT0EsQ0FBQztBQUNyQixNQUFNSyxZQUFZTCxtQkFBT0EsQ0FBQztBQUUxQk0sT0FBT0MsT0FBTyxHQUFHO0lBQ2ZSO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0d2ViLy4vbm9kZV9tb2R1bGVzL3Rlc3NlcmFjdC5qcy9zcmMvd29ya2VyL25vZGUvaW5kZXguanM/OWIyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBUZXNzZXJhY3QgV29ya2VyIGltcGwuIGZvciBub2RlICh1c2luZyBjaGlsZF9wcm9jZXNzKVxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgVGVzc2VyYWN0IFdvcmtlciBpbXBsLiBmb3Igbm9kZVxuICogQGF1dGhvciBLZXZpbiBLd29rIDxhbnRpbWF0dGVyMTVAZ21haWwuY29tPlxuICogQGF1dGhvciBHdWlsbGVybW8gV2Vic3RlciA8Z3VpQG1pdC5lZHU+XG4gKiBAYXV0aG9yIEplcm9tZSBXdSA8amVyb21ld3VzQGdtYWlsLmNvbT5cbiAqL1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSByZXF1aXJlKCcuL2RlZmF1bHRPcHRpb25zJyk7XG5jb25zdCBzcGF3bldvcmtlciA9IHJlcXVpcmUoJy4vc3Bhd25Xb3JrZXInKTtcbmNvbnN0IHRlcm1pbmF0ZVdvcmtlciA9IHJlcXVpcmUoJy4vdGVybWluYXRlV29ya2VyJyk7XG5jb25zdCBvbk1lc3NhZ2UgPSByZXF1aXJlKCcuL29uTWVzc2FnZScpO1xuY29uc3Qgc2VuZCA9IHJlcXVpcmUoJy4vc2VuZCcpO1xuY29uc3QgbG9hZEltYWdlID0gcmVxdWlyZSgnLi9sb2FkSW1hZ2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHRPcHRpb25zLFxuICBzcGF3bldvcmtlcixcbiAgdGVybWluYXRlV29ya2VyLFxuICBvbk1lc3NhZ2UsXG4gIHNlbmQsXG4gIGxvYWRJbWFnZSxcbn07XG4iXSwibmFtZXMiOlsiZGVmYXVsdE9wdGlvbnMiLCJyZXF1aXJlIiwic3Bhd25Xb3JrZXIiLCJ0ZXJtaW5hdGVXb3JrZXIiLCJvbk1lc3NhZ2UiLCJzZW5kIiwibG9hZEltYWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/loadImage.js":
/*!****************************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/loadImage.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst fetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\nconst isURL = __webpack_require__(/*! is-url */ \"(ssr)/./node_modules/is-url/index.js\");\nconst readFile = util.promisify(fs.readFile);\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access public\n */ module.exports = async (image)=>{\n    let data = image;\n    if (typeof image === \"undefined\") {\n        return image;\n    }\n    if (typeof image === \"string\") {\n        if (isURL(image) || image.startsWith(\"moz-extension://\") || image.startsWith(\"chrome-extension://\") || image.startsWith(\"file://\")) {\n            const resp = await fetch(image);\n            data = await resp.arrayBuffer();\n        } else if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n            data = Buffer.from(image.split(\",\")[1], \"base64\");\n        } else {\n            data = await readFile(image);\n        }\n    } else if (Buffer.isBuffer(image)) {\n        data = image;\n    }\n    return new Uint8Array(data);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9sb2FkSW1hZ2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU1DLEtBQUtELG1CQUFPQSxDQUFDO0FBQ25CLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1HLFFBQVFILG1CQUFPQSxDQUFDO0FBRXRCLE1BQU1JLFdBQVdMLEtBQUtNLFNBQVMsQ0FBQ0osR0FBR0csUUFBUTtBQUUzQzs7Ozs7O0NBTUMsR0FDREUsT0FBT0MsT0FBTyxHQUFHLE9BQU9DO0lBQ3RCLElBQUlDLE9BQU9EO0lBQ1gsSUFBSSxPQUFPQSxVQUFVLGFBQWE7UUFDaEMsT0FBT0E7SUFDVDtJQUVBLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzdCLElBQUlMLE1BQU1LLFVBQVVBLE1BQU1FLFVBQVUsQ0FBQyx1QkFBdUJGLE1BQU1FLFVBQVUsQ0FBQywwQkFBMEJGLE1BQU1FLFVBQVUsQ0FBQyxZQUFZO1lBQ2xJLE1BQU1DLE9BQU8sTUFBTVQsTUFBTU07WUFDekJDLE9BQU8sTUFBTUUsS0FBS0MsV0FBVztRQUMvQixPQUFPLElBQUkseUNBQXlDQyxJQUFJLENBQUNMLFFBQVE7WUFDL0RDLE9BQU9LLE9BQU9DLElBQUksQ0FBQ1AsTUFBTVEsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDMUMsT0FBTztZQUNMUCxPQUFPLE1BQU1MLFNBQVNJO1FBQ3hCO0lBQ0YsT0FBTyxJQUFJTSxPQUFPRyxRQUFRLENBQUNULFFBQVE7UUFDakNDLE9BQU9EO0lBQ1Q7SUFFQSxPQUFPLElBQUlVLFdBQVdUO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL3dvcmtlci9ub2RlL2xvYWRJbWFnZS5qcz84MzBhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKTtcbmNvbnN0IGlzVVJMID0gcmVxdWlyZSgnaXMtdXJsJyk7XG5cbmNvbnN0IHJlYWRGaWxlID0gdXRpbC5wcm9taXNpZnkoZnMucmVhZEZpbGUpO1xuXG4vKipcbiAqIGxvYWRJbWFnZVxuICpcbiAqIEBuYW1lIGxvYWRJbWFnZVxuICogQGZ1bmN0aW9uIGxvYWQgaW1hZ2UgZnJvbSBkaWZmZXJlbnQgc291cmNlXG4gKiBAYWNjZXNzIHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChpbWFnZSkgPT4ge1xuICBsZXQgZGF0YSA9IGltYWdlO1xuICBpZiAodHlwZW9mIGltYWdlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBpbWFnZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGlzVVJMKGltYWdlKSB8fCBpbWFnZS5zdGFydHNXaXRoKCdtb3otZXh0ZW5zaW9uOi8vJykgfHwgaW1hZ2Uuc3RhcnRzV2l0aCgnY2hyb21lLWV4dGVuc2lvbjovLycpIHx8IGltYWdlLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSkge1xuICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKGltYWdlKTtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXNwLmFycmF5QnVmZmVyKCk7XG4gICAgfSBlbHNlIGlmICgvZGF0YTppbWFnZVxcLyhbYS16QS1aXSopO2Jhc2U2NCwoW15cIl0qKS8udGVzdChpbWFnZSkpIHtcbiAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShpbWFnZS5zcGxpdCgnLCcpWzFdLCAnYmFzZTY0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZWFkRmlsZShpbWFnZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbWFnZSkpIHtcbiAgICBkYXRhID0gaW1hZ2U7XG4gIH1cblxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG59O1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiZnMiLCJmZXRjaCIsImlzVVJMIiwicmVhZEZpbGUiLCJwcm9taXNpZnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1hZ2UiLCJkYXRhIiwic3RhcnRzV2l0aCIsInJlc3AiLCJhcnJheUJ1ZmZlciIsInRlc3QiLCJCdWZmZXIiLCJmcm9tIiwic3BsaXQiLCJpc0J1ZmZlciIsIlVpbnQ4QXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/loadImage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/onMessage.js":
/*!****************************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/onMessage.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (worker, handler)=>{\n    worker.on(\"message\", handler);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9vbk1lc3NhZ2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUcsQ0FBQ0MsUUFBUUM7SUFDeEJELE9BQU9FLEVBQUUsQ0FBQyxXQUFXRDtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHR3ZWIvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9vbk1lc3NhZ2UuanM/MGFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICh3b3JrZXIsIGhhbmRsZXIpID0+IHtcbiAgd29ya2VyLm9uKCdtZXNzYWdlJywgaGFuZGxlcik7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ3b3JrZXIiLCJoYW5kbGVyIiwib24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/onMessage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/send.js":
/*!***********************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/send.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */ \nmodule.exports = async (worker, packet)=>{\n    worker.postMessage(packet);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9zZW5kLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQztBQUNEQSxPQUFPQyxPQUFPLEdBQUcsT0FBT0MsUUFBUUM7SUFDOUJELE9BQU9FLFdBQVcsQ0FBQ0Q7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0d2ViLy4vbm9kZV9tb2R1bGVzL3Rlc3NlcmFjdC5qcy9zcmMvd29ya2VyL25vZGUvc2VuZC5qcz84ODNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogc2VuZFxuICpcbiAqIEBuYW1lIHNlbmRcbiAqIEBmdW5jdGlvbiBzZW5kIHBhY2tldCB0byB3b3JrZXIgYW5kIGNyZWF0ZSBhIGpvYlxuICogQGFjY2VzcyBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAod29ya2VyLCBwYWNrZXQpID0+IHtcbiAgd29ya2VyLnBvc3RNZXNzYWdlKHBhY2tldCk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ3b3JrZXIiLCJwYWNrZXQiLCJwb3N0TWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/send.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/spawnWorker.js":
/*!******************************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/spawnWorker.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Worker } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\n/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function fork a new process in node\n * @access public\n */ module.exports = ({ workerPath })=>new Worker(workerPath);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS9zcGF3bldvcmtlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFQSxNQUFNLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFM0I7Ozs7OztDQU1DLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxDQUFDLEVBQUVDLFVBQVUsRUFBRSxHQUFLLElBQUlKLE9BQU9JIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHdlYi8uL25vZGVfbW9kdWxlcy90ZXNzZXJhY3QuanMvc3JjL3dvcmtlci9ub2RlL3NwYXduV29ya2VyLmpzP2UyMzYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBXb3JrZXIgfSA9IHJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJyk7XG5cbi8qKlxuICogc3Bhd25Xb3JrZXJcbiAqXG4gKiBAbmFtZSBzcGF3bldvcmtlclxuICogQGZ1bmN0aW9uIGZvcmsgYSBuZXcgcHJvY2VzcyBpbiBub2RlXG4gKiBAYWNjZXNzIHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9ICh7IHdvcmtlclBhdGggfSkgPT4gbmV3IFdvcmtlcih3b3JrZXJQYXRoKTtcbiJdLCJuYW1lcyI6WyJXb3JrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIndvcmtlclBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/spawnWorker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tesseract.js/src/worker/node/terminateWorker.js":
/*!**********************************************************************!*\
  !*** ./node_modules/tesseract.js/src/worker/node/terminateWorker.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function kill worker\n * @access public\n */ \nmodule.exports = (worker)=>{\n    worker.terminate();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS90ZXJtaW5hdGVXb3JrZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DO0FBQ0RBLE9BQU9DLE9BQU8sR0FBRyxDQUFDQztJQUNoQkEsT0FBT0MsU0FBUztBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHR3ZWIvLi9ub2RlX21vZHVsZXMvdGVzc2VyYWN0LmpzL3NyYy93b3JrZXIvbm9kZS90ZXJtaW5hdGVXb3JrZXIuanM/YzYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHRlcm1pbmF0ZVdvcmtlclxuICpcbiAqIEBuYW1lIHRlcm1pbmF0ZVdvcmtlclxuICogQGZ1bmN0aW9uIGtpbGwgd29ya2VyXG4gKiBAYWNjZXNzIHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9ICh3b3JrZXIpID0+IHtcbiAgd29ya2VyLnRlcm1pbmF0ZSgpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwid29ya2VyIiwidGVybWluYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tesseract.js/src/worker/node/terminateWorker.js\n");

/***/ })

};
;